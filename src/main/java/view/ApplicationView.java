/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import dao.AgendaDao;
import dao.CaixaDao;
import dao.ClienteDao;
import dao.FuncionarioDao;
import dao.PetDao;
import dao.ProdutoDao;
import dao.VendaDao;
import dao.VendaProdutoDao;
import dao.VendasPorMesViewDao;
import entities.Agenda;
import entities.Atendimento;
import entities.Caixa;
import entities.Cliente;
import entities.Funcionario;
import entities.Permissao;
import entities.Pet;
import entities.Produto;
import entities.Venda;
import entities.VendaProduto;
import entities.VendasPorMesView;
import java.awt.BasicStroke;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Font;
import java.text.DecimalFormat;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.stream.Collectors;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import lombok.extern.log4j.Log4j2;
import org.hibernate.SessionFactory;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.chart.renderer.category.CategoryItemRenderer;
import org.jfree.chart.renderer.category.LineAndShapeRenderer;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.general.DefaultPieDataset;
import utils.HibernateUtil;
import utils.ReportsGenerator;
import utils.VisualsConfig;

@Log4j2
public class ApplicationView extends javax.swing.JFrame {

    private final Funcionario funcLogado;
    private boolean isAdmin;
    private SessionFactory sessionFactory;
    private FuncionarioDao fd;
    private String busca;
    private Permissao permissao;
    private int id;
    private Produto produto = new Produto();
    private Map<Produto, Integer> itens = new HashMap<>();
    DefaultTableModel dtmVendas = new DefaultTableModel();
    String preco;
    Funcionario funcionario;
    Venda venda;

    /**
     * Creates new form ApplicationView
     *
     */
    public ApplicationView(Funcionario funcLogado) {
        initComponents();

        pnlcadastros.setVisible(false);

        VisualsConfig.setPropsToWindow(this, "Pet Point", rootPane);
        this.funcLogado = funcLogado;
        this.sessionFactory = HibernateUtil.getSessionFactory();
        this.fd = new FuncionarioDao(sessionFactory);
        this.busca = "";
        this.id = 0;
        configurarTblCadastros();
        configurarBotoes();
        permissao = funcLogado.getPermissao();
        this.carregarHomeByPermissao();
        configurarPermissoes(permissao);
        configurarPermissoesCadastros(permissao);
        lblLogado.setText(funcLogado.getNome());
        lblPetshop.setVisible(false);
        lblVeterinaria.setVisible(false);
        this.funcionario = funcLogado;
        this.venda = new Venda();

        this.isAdmin = this.funcLogado.getPermissao().getDescricao().equals("admin");

        this.setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);

        this.atualizarDashboard();

        try {
            funcLogado.setLogado(true);
            fd.atualizar(funcLogado);
        } catch (Exception e) {
            log.error("Erro ao alterar status de login do funcionário: " + e.getMessage());
            JOptionPane.showMessageDialog(null, "Erro ao alterar status de login do funcionário.");
        }
    }
    
     String formapagamento = "";
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        background = new javax.swing.JPanel();
        pnlmenulateral = new javax.swing.JPanel();
        userimg = new javax.swing.JLabel();
        btnhome = new javax.swing.JButton();
        btncadastro = new javax.swing.JButton();
        btnrelatorio = new javax.swing.JButton();
        lblLogado = new javax.swing.JLabel();
        btnSair = new javax.swing.JButton();
        btnAdmin = new javax.swing.JButton();
        btnAgenda = new javax.swing.JButton();
        barralateral = new javax.swing.JLabel();
        pnlHomeAdmin = new javax.swing.JPanel();
        lblVeterinaria = new javax.swing.JLabel();
        lblPetshop = new javax.swing.JLabel();
        btnVeterinaria = new javax.swing.JButton();
        btnPetshop = new javax.swing.JButton();
        pnlVendasMesChart = new javax.swing.JPanel();
        pnlTopProdutosChart = new javax.swing.JPanel();
        pnlContadores = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        lblTotalClientes = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        lblTotalProdutos = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        lblTotalLucroMes = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        pnlHomePet = new javax.swing.JPanel();
        pnlVendas = new javax.swing.JPanel();
        btnfinalizar = new javax.swing.JButton();
        tfdTotal = new javax.swing.JLabel();
        tfdPagar = new javax.swing.JTextField();
        lblPagar = new javax.swing.JLabel();
        chkDinheiro = new javax.swing.JCheckBox();
        chkCartao = new javax.swing.JCheckBox();
        jScrollPane4 = new javax.swing.JScrollPane();
        tabelaVenda = new javax.swing.JTable();
        btnadicionar = new javax.swing.JButton();
        btndescartar = new javax.swing.JButton();
        tfdValorTotal = new javax.swing.JTextField();
        cifrao2 = new javax.swing.JLabel();
        cifrao1 = new javax.swing.JLabel();
        tfdValorUnitario = new javax.swing.JTextField();
        spnQuantidade = new javax.swing.JSpinner();
        tfdProduto = new javax.swing.JTextField();
        tfdCodigo = new javax.swing.JTextField();
        btnbuscacodigo = new javax.swing.JButton();
        fndVendas = new javax.swing.JLabel();
        btnvendas = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        txaAtendPet = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        btncadastros = new javax.swing.JButton();
        fundoPet = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        pnlHomeVet = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        txaAtendVet = new javax.swing.JTextArea();
        fundoVet = new javax.swing.JLabel();
        pnlcadastros = new javax.swing.JPanel();
        tfdbusca = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblgeral = new javax.swing.JTable();
        btnAdicionar = new javax.swing.JButton();
        btnRelatorioCadastros = new javax.swing.JButton();
        cmbescolher = new javax.swing.JComboBox<>();
        fundobusca = new javax.swing.JLabel();
        pnlRelatorios = new javax.swing.JPanel();
        btnAtendimentosFuncionario = new javax.swing.JButton();
        btnProdutosSemEstoque = new javax.swing.JButton();
        btnAtendimentosPet = new javax.swing.JButton();
        btnListagemAtendimentos = new javax.swing.JButton();
        fndrelatorios = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        background.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        pnlmenulateral.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        userimg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/user.png"))); // NOI18N
        pnlmenulateral.add(userimg, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 60, -1, -1));

        btnhome.setBackground(new java.awt.Color(58, 203, 199));
        btnhome.setForeground(new java.awt.Color(58, 203, 199));
        btnhome.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/home.png"))); // NOI18N
        btnhome.setToolTipText("Home");
        btnhome.setBorder(null);
        btnhome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnhomeActionPerformed(evt);
            }
        });
        pnlmenulateral.add(btnhome, new org.netbeans.lib.awtextra.AbsoluteConstraints(18, 240, 130, 50));

        btncadastro.setBackground(new java.awt.Color(58, 203, 199));
        btncadastro.setForeground(new java.awt.Color(58, 203, 199));
        btncadastro.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/iconcadastro.png"))); // NOI18N
        btncadastro.setToolTipText("Cadastros");
        btncadastro.setBorder(null);
        btncadastro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btncadastroActionPerformed(evt);
            }
        });
        pnlmenulateral.add(btncadastro, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 310, 130, 50));

        btnrelatorio.setBackground(new java.awt.Color(58, 203, 199));
        btnrelatorio.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/btnrelatorio.png"))); // NOI18N
        btnrelatorio.setToolTipText("Relatórios");
        btnrelatorio.setBorder(null);
        btnrelatorio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnrelatorioActionPerformed(evt);
            }
        });
        pnlmenulateral.add(btnrelatorio, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 440, 130, 50));

        lblLogado.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        lblLogado.setForeground(new java.awt.Color(255, 255, 255));
        lblLogado.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblLogado.setText("logado");
        pnlmenulateral.add(lblLogado, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 100, 130, 40));

        btnSair.setBackground(new java.awt.Color(58, 203, 199));
        btnSair.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/btnlogout.png"))); // NOI18N
        btnSair.setBorder(null);
        btnSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSairActionPerformed(evt);
            }
        });
        pnlmenulateral.add(btnSair, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 1010, 130, 40));

        btnAdmin.setBackground(new java.awt.Color(58, 203, 199));
        btnAdmin.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/iconlogs.png"))); // NOI18N
        btnAdmin.setToolTipText("Logs e Auditoria");
        btnAdmin.setBorder(null);
        btnAdmin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAdminActionPerformed(evt);
            }
        });
        pnlmenulateral.add(btnAdmin, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 500, 130, 50));

        btnAgenda.setBackground(new java.awt.Color(58, 203, 199));
        btnAgenda.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/btnAgendar.png"))); // NOI18N
        btnAgenda.setToolTipText("Agendas");
        btnAgenda.setBorder(null);
        btnAgenda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgendaActionPerformed(evt);
            }
        });
        pnlmenulateral.add(btnAgenda, new org.netbeans.lib.awtextra.AbsoluteConstraints(18, 375, 130, 50));

        barralateral.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/barralateral.png"))); // NOI18N
        pnlmenulateral.add(barralateral, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        background.add(pnlmenulateral, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 160, 1080));

        pnlHomeAdmin.setBackground(new java.awt.Color(236, 236, 236));
        pnlHomeAdmin.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblVeterinaria.setFont(new java.awt.Font("Grand Aventure Text", 0, 100)); // NOI18N
        lblVeterinaria.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/letreiro-veterinaria.png"))); // NOI18N
        pnlHomeAdmin.add(lblVeterinaria, new org.netbeans.lib.awtextra.AbsoluteConstraints(1360, 930, -1, -1));

        lblPetshop.setFont(new java.awt.Font("Grand Aventure Text", 0, 100)); // NOI18N
        lblPetshop.setForeground(new java.awt.Color(255, 255, 255));
        lblPetshop.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/letreiro-petshop.png"))); // NOI18N
        pnlHomeAdmin.add(lblPetshop, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 420, -1, -1));

        btnVeterinaria.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/btnvet.png"))); // NOI18N
        btnVeterinaria.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnVeterinariaMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnVeterinariaMouseExited(evt);
            }
        });
        btnVeterinaria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVeterinariaActionPerformed(evt);
            }
        });
        pnlHomeAdmin.add(btnVeterinaria, new org.netbeans.lib.awtextra.AbsoluteConstraints(1200, 390, 560, 690));

        btnPetshop.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/btnpetshop.png"))); // NOI18N
        btnPetshop.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnPetshopMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnPetshopMouseExited(evt);
            }
        });
        btnPetshop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPetshopActionPerformed(evt);
            }
        });
        pnlHomeAdmin.add(btnPetshop, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 390, 600, 690));

        pnlVendasMesChart.setBackground(new java.awt.Color(236, 236, 236));
        pnlVendasMesChart.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(58, 203, 199), 1, true));
        pnlVendasMesChart.setMaximumSize(new java.awt.Dimension(1150, 320));
        pnlVendasMesChart.setPreferredSize(new java.awt.Dimension(1150, 320));

        javax.swing.GroupLayout pnlVendasMesChartLayout = new javax.swing.GroupLayout(pnlVendasMesChart);
        pnlVendasMesChart.setLayout(pnlVendasMesChartLayout);
        pnlVendasMesChartLayout.setHorizontalGroup(
            pnlVendasMesChartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        pnlVendasMesChartLayout.setVerticalGroup(
            pnlVendasMesChartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 318, Short.MAX_VALUE)
        );

        pnlHomeAdmin.add(pnlVendasMesChart, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 40, 1150, 320));

        pnlTopProdutosChart.setBackground(new java.awt.Color(236, 236, 236));
        pnlTopProdutosChart.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(58, 203, 199)));
        pnlTopProdutosChart.setMaximumSize(new java.awt.Dimension(580, 320));

        javax.swing.GroupLayout pnlTopProdutosChartLayout = new javax.swing.GroupLayout(pnlTopProdutosChart);
        pnlTopProdutosChart.setLayout(pnlTopProdutosChartLayout);
        pnlTopProdutosChartLayout.setHorizontalGroup(
            pnlTopProdutosChartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 576, Short.MAX_VALUE)
        );
        pnlTopProdutosChartLayout.setVerticalGroup(
            pnlTopProdutosChartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 318, Short.MAX_VALUE)
        );

        pnlHomeAdmin.add(pnlTopProdutosChart, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 390, 578, 320));

        pnlContadores.setBackground(new java.awt.Color(236, 236, 236));
        pnlContadores.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(58, 203, 199)));
        pnlContadores.setForeground(new java.awt.Color(58, 203, 199));

        jPanel2.setBackground(new java.awt.Color(236, 236, 236));
        jPanel2.setBorder(javax.swing.BorderFactory.createMatteBorder(10, 0, 2, 0, new java.awt.Color(58, 203, 199)));

        lblTotalClientes.setFont(new java.awt.Font("Segoe UI", 1, 20)); // NOI18N

        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/group.png"))); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel7)
                .addGap(18, 18, 18)
                .addComponent(lblTotalClientes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblTotalClientes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, 65, Short.MAX_VALUE))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        jPanel3.setBackground(new java.awt.Color(236, 236, 236));
        jPanel3.setBorder(javax.swing.BorderFactory.createMatteBorder(10, 0, 2, 0, new java.awt.Color(58, 203, 199)));

        lblTotalProdutos.setFont(new java.awt.Font("Segoe UI", 1, 20)); // NOI18N

        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/boxes.png"))); // NOI18N

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel8)
                .addGap(18, 18, 18)
                .addComponent(lblTotalProdutos, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTotalProdutos, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        jPanel5.setBackground(new java.awt.Color(236, 236, 236));
        jPanel5.setBorder(javax.swing.BorderFactory.createMatteBorder(10, 0, 2, 0, new java.awt.Color(58, 203, 199)));

        lblTotalLucroMes.setFont(new java.awt.Font("Segoe UI", 1, 20)); // NOI18N

        jLabel9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/brazilian-real.png"))); // NOI18N

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblTotalLucroMes, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblTotalLucroMes, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        jLabel2.setFont(new java.awt.Font("Poppins", 1, 20)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(58, 203, 199));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Clientes");

        jLabel4.setFont(new java.awt.Font("Poppins", 1, 24)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(58, 203, 199));
        jLabel4.setText("TOTAL");

        jLabel5.setFont(new java.awt.Font("Poppins", 1, 20)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(58, 203, 199));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Produtos");

        jLabel6.setFont(new java.awt.Font("Poppins", 1, 20)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(58, 203, 199));
        jLabel6.setText("Lucro do mês");

        javax.swing.GroupLayout pnlContadoresLayout = new javax.swing.GroupLayout(pnlContadores);
        pnlContadores.setLayout(pnlContadoresLayout);
        pnlContadoresLayout.setHorizontalGroup(
            pnlContadoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlContadoresLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(pnlContadoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlContadoresLayout.createSequentialGroup()
                        .addGroup(pnlContadoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 144, Short.MAX_VALUE)
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(43, 43, 43)
                        .addGroup(pnlContadoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 42, Short.MAX_VALUE)
                        .addGroup(pnlContadoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(32, 32, 32))
                    .addGroup(pnlContadoresLayout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        pnlContadoresLayout.setVerticalGroup(
            pnlContadoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlContadoresLayout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addComponent(jLabel4)
                .addGap(40, 40, 40)
                .addGroup(pnlContadoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6))
                .addGap(12, 12, 12)
                .addGroup(pnlContadoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(78, Short.MAX_VALUE))
        );

        pnlHomeAdmin.add(pnlContadores, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, 580, 320));

        background.add(pnlHomeAdmin, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 0, 1760, 1080));

        pnlHomePet.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        pnlVendas.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnfinalizar.setBackground(new java.awt.Color(2, 166, 166));
        btnfinalizar.setFont(new java.awt.Font("Poppins", 0, 24)); // NOI18N
        btnfinalizar.setForeground(new java.awt.Color(255, 255, 255));
        btnfinalizar.setText("Finalizar venda");
        btnfinalizar.setBorder(null);
        btnfinalizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnfinalizarActionPerformed(evt);
            }
        });
        pnlVendas.add(btnfinalizar, new org.netbeans.lib.awtextra.AbsoluteConstraints(1310, 870, 410, 60));

        tfdTotal.setFont(new java.awt.Font("Poppins", 0, 20)); // NOI18N
        tfdTotal.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        pnlVendas.add(tfdTotal, new org.netbeans.lib.awtextra.AbsoluteConstraints(1400, 810, 310, 40));

        tfdPagar.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        tfdPagar.setToolTipText("");
        tfdPagar.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        pnlVendas.add(tfdPagar, new org.netbeans.lib.awtextra.AbsoluteConstraints(1440, 440, 190, 40));

        lblPagar.setFont(new java.awt.Font("Poppins", 0, 18)); // NOI18N
        lblPagar.setText("Pagar:");
        pnlVendas.add(lblPagar, new org.netbeans.lib.awtextra.AbsoluteConstraints(1367, 448, 60, 30));

        chkDinheiro.setBackground(new java.awt.Color(255, 255, 255));
        chkDinheiro.setFont(new java.awt.Font("Poppins", 1, 18)); // NOI18N
        chkDinheiro.setText("    Dinheiro");
        chkDinheiro.setToolTipText("");
        chkDinheiro.setFocusPainted(false);
        chkDinheiro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkDinheiroActionPerformed(evt);
            }
        });
        pnlVendas.add(chkDinheiro, new org.netbeans.lib.awtextra.AbsoluteConstraints(1340, 240, -1, -1));

        chkCartao.setBackground(new java.awt.Color(255, 255, 255));
        chkCartao.setFont(new java.awt.Font("Poppins", 1, 18)); // NOI18N
        chkCartao.setText("    Cartão");
        chkCartao.setToolTipText("");
        chkCartao.setFocusPainted(false);
        chkCartao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkCartaoActionPerformed(evt);
            }
        });
        pnlVendas.add(chkCartao, new org.netbeans.lib.awtextra.AbsoluteConstraints(1530, 240, -1, -1));

        tabelaVenda.setFont(new java.awt.Font("Poppins", 0, 13)); // NOI18N
        tabelaVenda.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código", "Título", "Preço", "Quantidade", "Subtotal"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabelaVenda.setGridColor(new java.awt.Color(204, 204, 204));
        tabelaVenda.setRowHeight(35);
        tabelaVenda.setSelectionBackground(new java.awt.Color(204, 204, 204));
        jScrollPane4.setViewportView(tabelaVenda);

        pnlVendas.add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 340, 1160, 630));

        btnadicionar.setBackground(new java.awt.Color(255, 255, 255));
        btnadicionar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/adicionar.png"))); // NOI18N
        btnadicionar.setBorder(null);
        btnadicionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnadicionarActionPerformed(evt);
            }
        });
        pnlVendas.add(btnadicionar, new org.netbeans.lib.awtextra.AbsoluteConstraints(1090, 235, 80, 40));

        btndescartar.setBackground(new java.awt.Color(255, 255, 255));
        btndescartar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/descartar.png"))); // NOI18N
        btndescartar.setBorder(null);
        btndescartar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btndescartarActionPerformed(evt);
            }
        });
        pnlVendas.add(btndescartar, new org.netbeans.lib.awtextra.AbsoluteConstraints(1000, 235, 80, 40));

        tfdValorTotal.setBackground(new java.awt.Color(229, 233, 233));
        tfdValorTotal.setFont(new java.awt.Font("Poppins", 0, 18)); // NOI18N
        tfdValorTotal.setToolTipText("");
        tfdValorTotal.setBorder(null);
        pnlVendas.add(tfdValorTotal, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 220, 160, 50));

        cifrao2.setFont(new java.awt.Font("Poppins", 0, 18)); // NOI18N
        cifrao2.setText("R$");
        pnlVendas.add(cifrao2, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 230, -1, -1));

        cifrao1.setFont(new java.awt.Font("Poppins", 0, 18)); // NOI18N
        cifrao1.setText("R$");
        pnlVendas.add(cifrao1, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 230, -1, -1));

        tfdValorUnitario.setBackground(new java.awt.Color(229, 233, 233));
        tfdValorUnitario.setFont(new java.awt.Font("Poppins", 0, 18)); // NOI18N
        tfdValorUnitario.setToolTipText("");
        tfdValorUnitario.setBorder(null);
        pnlVendas.add(tfdValorUnitario, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 220, 160, 50));

        spnQuantidade.setFont(new java.awt.Font("Poppins", 0, 18)); // NOI18N
        spnQuantidade.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        spnQuantidade.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        spnQuantidade.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spnQuantidadeStateChanged(evt);
            }
        });
        pnlVendas.add(spnQuantidade, new org.netbeans.lib.awtextra.AbsoluteConstraints(990, 140, 180, 40));

        tfdProduto.setEditable(false);
        tfdProduto.setBackground(new java.awt.Color(229, 233, 233));
        tfdProduto.setFont(new java.awt.Font("Poppins", 0, 15)); // NOI18N
        tfdProduto.setBorder(null);
        pnlVendas.add(tfdProduto, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 130, 530, 40));

        tfdCodigo.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        tfdCodigo.setToolTipText("");
        tfdCodigo.setBorder(null);
        pnlVendas.add(tfdCodigo, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 126, 100, 40));

        btnbuscacodigo.setBackground(new java.awt.Color(2, 166, 166));
        btnbuscacodigo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/pesquisa.png"))); // NOI18N
        btnbuscacodigo.setBorder(null);
        btnbuscacodigo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnbuscacodigoActionPerformed(evt);
            }
        });
        pnlVendas.add(btnbuscacodigo, new org.netbeans.lib.awtextra.AbsoluteConstraints(262, 126, 40, 40));

        fndVendas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/telavendas.png"))); // NOI18N
        pnlVendas.add(fndVendas, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, -10, 1810, 1040));

        pnlHomePet.add(pnlVendas, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 90, 1810, 1040));

        btnvendas.setBackground(new java.awt.Color(236, 236, 236));
        btnvendas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/btnvendas.png"))); // NOI18N
        btnvendas.setBorder(null);
        btnvendas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnvendasActionPerformed(evt);
            }
        });
        pnlHomePet.add(btnvendas, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 30, 140, 50));

        txaAtendPet.setEditable(false);
        txaAtendPet.setColumns(20);
        txaAtendPet.setRows(5);
        jScrollPane2.setViewportView(txaAtendPet);

        pnlHomePet.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 310, 270, 220));

        jLabel1.setBackground(new java.awt.Color(64, 43, 52));
        jLabel1.setFont(new java.awt.Font("Poppins", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(106, 212, 209));
        jLabel1.setText("ATENDIMENTOS DO DIA");
        pnlHomePet.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 280, 220, -1));

        btncadastros.setBackground(new java.awt.Color(236, 236, 236));
        btncadastros.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/btncadastros.png"))); // NOI18N
        btncadastros.setBorder(null);
        btncadastros.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btncadastrosActionPerformed(evt);
            }
        });
        pnlHomePet.add(btncadastros, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 30, 150, 50));

        fundoPet.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/telapetshop.png"))); // NOI18N
        pnlHomePet.add(fundoPet, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        jPanel1.setBackground(new java.awt.Color(236, 236, 236));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1850, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1200, Short.MAX_VALUE)
        );

        pnlHomePet.add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(-40, -70, 1850, 1200));

        background.add(pnlHomePet, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 0, 1760, 1080));

        pnlHomeVet.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel3.setBackground(new java.awt.Color(64, 43, 52));
        jLabel3.setFont(new java.awt.Font("Poppins", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(106, 212, 209));
        jLabel3.setText("ATENDIMENTOS DO DIA");
        pnlHomeVet.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 260, -1, -1));

        txaAtendVet.setEditable(false);
        txaAtendVet.setColumns(20);
        txaAtendVet.setRows(5);
        jScrollPane3.setViewportView(txaAtendVet);

        pnlHomeVet.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 290, 240, 180));

        fundoVet.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/telaveterinaria.png"))); // NOI18N
        fundoVet.setToolTipText("");
        pnlHomeVet.add(fundoVet, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1760, 1080));

        background.add(pnlHomeVet, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 0, 1760, 1080));

        pnlcadastros.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tfdbusca.setBackground(new java.awt.Color(215, 214, 214));
        tfdbusca.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        tfdbusca.setToolTipText("");
        tfdbusca.setBorder(null);
        tfdbusca.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tfdbuscaKeyReleased(evt);
            }
        });
        pnlcadastros.add(tfdbusca, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 60, 1150, 40));

        tblgeral.setBackground(new java.awt.Color(218, 218, 218));
        tblgeral.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        tblgeral.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "id", "Nome", "Cidade", "CPF"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblgeral.setRowHeight(35);
        tblgeral.setSelectionBackground(new java.awt.Color(204, 204, 204));
        tblgeral.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblgeralMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblgeral);
        if (tblgeral.getColumnModel().getColumnCount() > 0) {
            tblgeral.getColumnModel().getColumn(0).setMinWidth(70);
            tblgeral.getColumnModel().getColumn(0).setPreferredWidth(70);
            tblgeral.getColumnModel().getColumn(0).setMaxWidth(70);
        }

        pnlcadastros.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 160, 1450, 800));

        btnAdicionar.setBackground(new java.awt.Color(225, 225, 225));
        btnAdicionar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/add.png"))); // NOI18N
        btnAdicionar.setToolTipText("");
        btnAdicionar.setBorder(null);
        btnAdicionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAdicionarActionPerformed(evt);
            }
        });
        pnlcadastros.add(btnAdicionar, new org.netbeans.lib.awtextra.AbsoluteConstraints(1550, 980, 50, 50));

        btnRelatorioCadastros.setBackground(new java.awt.Color(225, 225, 225));
        btnRelatorioCadastros.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/btnExportar.png"))); // NOI18N
        btnRelatorioCadastros.setBorder(null);
        btnRelatorioCadastros.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRelatorioCadastrosActionPerformed(evt);
            }
        });
        pnlcadastros.add(btnRelatorioCadastros, new org.netbeans.lib.awtextra.AbsoluteConstraints(1490, 980, 50, 50));

        cmbescolher.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        cmbescolher.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Funcionário", "Cliente", "Veterinário" }));
        cmbescolher.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbescolherItemStateChanged(evt);
            }
        });
        cmbescolher.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbescolherActionPerformed(evt);
            }
        });
        pnlcadastros.add(cmbescolher, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 990, 250, 40));

        fundobusca.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cadastrolista.png"))); // NOI18N
        pnlcadastros.add(fundobusca, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1770, -1));

        background.add(pnlcadastros, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 0, 1760, 1080));

        pnlRelatorios.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnAtendimentosFuncionario.setBorder(null);
        btnAtendimentosFuncionario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAtendimentosFuncionarioActionPerformed(evt);
            }
        });
        pnlRelatorios.add(btnAtendimentosFuncionario, new org.netbeans.lib.awtextra.AbsoluteConstraints(1390, 480, 300, 290));

        btnProdutosSemEstoque.setBorder(null);
        btnProdutosSemEstoque.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProdutosSemEstoqueActionPerformed(evt);
            }
        });
        pnlRelatorios.add(btnProdutosSemEstoque, new org.netbeans.lib.awtextra.AbsoluteConstraints(950, 470, 300, 290));

        btnAtendimentosPet.setBorder(null);
        btnAtendimentosPet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAtendimentosPetActionPerformed(evt);
            }
        });
        pnlRelatorios.add(btnAtendimentosPet, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 470, 300, 290));

        btnListagemAtendimentos.setBorder(null);
        btnListagemAtendimentos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnListagemAtendimentosActionPerformed(evt);
            }
        });
        pnlRelatorios.add(btnListagemAtendimentos, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 480, 300, 290));

        fndrelatorios.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/telarelatorios.png"))); // NOI18N
        pnlRelatorios.add(fndrelatorios, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        background.add(pnlRelatorios, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 0, 1760, 1080));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(background, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(background, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void configurarPermissoes(Permissao permissao) {

        if (permissao.getId() == 2) {
            btnAdmin.setVisible(false);
        } else if (permissao.getId() == 3) {
            btnAdmin.setVisible(false);
        }
    }

    private void atualizarDashboard() {
        // dashboard petshop & veterinaria -------------------------------------
        List<Atendimento> atendimentos = new ArrayList<>();
        List<Agenda> agendas = new AgendaDao(sessionFactory).buscarTodos();
        for (Agenda agd : agendas) {
            if (agd.getData().equals(LocalDate.now()) && agd.getFuncionario().getId() == funcLogado.getId()) {
                atendimentos.addAll(agd.getAtendimentos());
            }
        }

        String atendimentosString = "";

        for (Atendimento atd : atendimentos) {
            atendimentosString += "Horário: " + atd.getHora() + ", Pet: " + atd.getPet().getNome() + "\n";
        }

        if (funcLogado.getPermissao().getDescricao().equals("petshop")) {
            txaAtendPet.setText(atendimentosString);
        } else if (funcLogado.getPermissao().getDescricao().equals("veterinaria")) {
            txaAtendVet.setText(atendimentosString);
        }
        // ---------------------------------------------------------------------

        // dashboard admin -----------------------------------------------------
        List<Cliente> clientes = new ClienteDao(sessionFactory).buscarTodos();
        List<Produto> produtos = new ProdutoDao(sessionFactory).buscarTodos();
        List<VendaProduto> vendaProdutos = new VendaProdutoDao(sessionFactory).buscarTodos();

        lblTotalClientes.setText(String.valueOf(clientes.size()));
        lblTotalProdutos.setText(String.valueOf(produtos.size()));

        LocalDate dataAtual = LocalDate.now();
        int mesAtual = dataAtual.getMonthValue();
        int anoAtual = dataAtual.getYear();

        double lucroBrutoTotalMes = 0;

        for (VendaProduto vp : vendaProdutos) {
            if (vp.getVenda().getData_venda().getMonthValue() == mesAtual
                    && vp.getVenda().getData_venda().getYear() == anoAtual) {
                lucroBrutoTotalMes += vp.getQtde_item() * vp.getValor_item();
                lucroBrutoTotalMes -= vp.getProduto().getPreco_custo() * vp.getQtde_item();
            }
        }

        lblTotalLucroMes.setText(String.format("%.2f", lucroBrutoTotalMes));

        this.showPieChart();
        this.showLineChart();
        this.showBarChart();
        // ---------------------------------------------------------------------
    }

    public void showPieChart() {
        List<VendaProduto> vendaProdutos = new VendaProdutoDao(sessionFactory).buscarTodos();
        Map<String, Integer> produtosVendidosAgrupados = new HashMap<>();

        //create dataset
        DefaultPieDataset pieDataset = new DefaultPieDataset();

        for (VendaProduto vp : vendaProdutos) {
            if (!produtosVendidosAgrupados.containsKey(vp.getProduto().getNome())) {
                produtosVendidosAgrupados.put(vp.getProduto().getNome(), (int) vp.getQtde_item());
            } else {
                produtosVendidosAgrupados.put(vp.getProduto().getNome(),
                        produtosVendidosAgrupados.get(vp.getProduto().getNome()) + (int) vp.getQtde_item());
            }
        }
        
        for (var entry : produtosVendidosAgrupados.entrySet()) {
            String prodNome = entry.getKey();
            Integer qtde = entry.getValue();
            
            pieDataset.setValue(prodNome + ": " + qtde, qtde);
        }

        //create chart
        JFreeChart piechart = ChartFactory.createPieChart("Produtos mais vendidos", pieDataset, false, true, false);//explain
        piechart.setBackgroundPaint(new Color(236, 236, 236));
        
        PiePlot piePlot = (PiePlot) piechart.getPlot();
        piePlot.setBackgroundPaint(new Color(236, 236, 236));
        piePlot.setLabelBackgroundPaint(new Color(58, 203, 199));

        //create chartPanel to display chart(graph)
        ChartPanel barChartPanel = new ChartPanel(piechart);
        pnlTopProdutosChart.setLayout(new BorderLayout());
        pnlTopProdutosChart.removeAll();
        pnlTopProdutosChart.add(barChartPanel, BorderLayout.CENTER);
        pnlTopProdutosChart.validate();
    }

    public void showLineChart() {

        List<VendasPorMesView> vendasAgrupadasPorMes = new VendasPorMesViewDao(sessionFactory).buscarTodos();

        //create dataset for the graph
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();

        for (int i = vendasAgrupadasPorMes.size() - 1; i >= 0; i--) {
            dataset.setValue(vendasAgrupadasPorMes.get(i).getQtde_vendas(),
                    "Num de Vendas", vendasAgrupadasPorMes.get(i).getData().getMonthValue()
                    + "/" + vendasAgrupadasPorMes.get(i).getData().getYear());
        }

        //create chart
        JFreeChart linechart = ChartFactory.createLineChart("Vendas/mês", "Mês", "Vendas",
                dataset, PlotOrientation.VERTICAL, false, true, false);
        linechart.setBackgroundPaint(new Color(236, 236, 236));

        //create plot object
        CategoryPlot lineCategoryPlot = linechart.getCategoryPlot();
        lineCategoryPlot.setRangeGridlinePaint(new Color(58, 203, 199));
        lineCategoryPlot.setBackgroundPaint(new Color(236, 236, 236));

        //create render object to change the moficy the line properties like color
        LineAndShapeRenderer lineRenderer = (LineAndShapeRenderer) lineCategoryPlot.getRenderer();
        Color lineChartColor = new Color(204, 0, 51);
        lineRenderer.setSeriesPaint(0, lineChartColor);

        //create chartPanel to display chart(graph)
        ChartPanel lineChartPanel = new ChartPanel(linechart);
        pnlVendasMesChart.setLayout(new BorderLayout());
        pnlVendasMesChart.removeAll();
        pnlVendasMesChart.add(lineChartPanel, BorderLayout.CENTER);
        pnlVendasMesChart.validate();
    }

    public void showBarChart() {
//        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
//        dataset.setValue(200, "Amount", "january");
//        dataset.setValue(150, "Amount", "february");
//        dataset.setValue(18, "Amount", "march");
//        dataset.setValue(100, "Amount", "april");
//        dataset.setValue(80, "Amount", "may");
//        dataset.setValue(250, "Amount", "june");
//
//        JFreeChart chart = ChartFactory.createBarChart("contribution", "monthly", "amount",
//                dataset, PlotOrientation.VERTICAL, false, true, false);
//
//        CategoryPlot categoryPlot = chart.getCategoryPlot();
//        //categoryPlot.setRangeGridlinePaint(Color.BLUE);
//        categoryPlot.setBackgroundPaint(new Color(236, 236, 236));
//        BarRenderer renderer = (BarRenderer) categoryPlot.getRenderer();
//        Color clr3 = new Color(204, 0, 51);
//        renderer.setSeriesPaint(0, clr3);
//
//        ChartPanel barpChartPanel = new ChartPanel(chart);
//        pnlBarChart.setLayout(new BorderLayout());
//        pnlBarChart.removeAll();
//        pnlBarChart.add(barpChartPanel, BorderLayout.CENTER);
//        pnlBarChart.validate();
    }

    private void configurarPermissoesCadastros(Permissao permissao) {
        switch (cmbescolher.getSelectedIndex()) {
            case 0:
                if (permissao.getId() == 2 || permissao.getId() == 3) {
                    btnAdicionar.setVisible(false);
                } else {
                    btnAdicionar.setVisible(true);
                }
                break;
            case 1:
                btnAdicionar.setVisible(true);
                break;
            case 2:
                if (permissao.getId() == 2 || permissao.getId() == 3) {
                    btnAdicionar.setVisible(false);
                } else {
                    btnAdicionar.setVisible(true);
                }
                break;
        }
    }

    private void btnhomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnhomeActionPerformed
        this.atualizarDashboard();
        this.carregarHomeByPermissao();
    }//GEN-LAST:event_btnhomeActionPerformed

    private void carregarHomeByPermissao() {
        this.desativarTelas();
        pnlmenulateral.setVisible(true);

        if (permissao.getId() == 1) {
            pnlHomeAdmin.setVisible(true);
        } else if (permissao.getId() == 2) {
            pnlHomeVet.setVisible(true);
        } else if (permissao.getId() == 3) {
            pnlHomePet.setVisible(true);
        }
    }

    private void btncadastroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btncadastroActionPerformed
        desativarTelas();
        pnlcadastros.setVisible(true);
        this.atualizarTabela();
        this.atualizarDashboard();
    }//GEN-LAST:event_btncadastroActionPerformed

    private void btnAdicionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAdicionarActionPerformed
        switch (cmbescolher.getSelectedIndex()) {
            case 0:
                DlgFuncionario tela = new DlgFuncionario(null, true);
                tela.setVisible(true);
                break;
            case 1:
                DlgCliente tela2 = new DlgCliente(null, true);
                tela2.setVisible(true);
                break;
            case 2:
                DlgVeterinario tela3 = new DlgVeterinario(null, true);
                tela3.setVisible(true);
                break;
            default:
                break;
        }

        this.atualizarTabela();
    }//GEN-LAST:event_btnAdicionarActionPerformed

    private void tblgeralMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblgeralMouseClicked
        try {
            String idString = String.valueOf(tblgeral.getValueAt(tblgeral.getSelectedRow(), 0));
            id = Integer.parseInt(idString);

            if (id < 0) {
                System.out.println("Id menor que 0");
            } else {
                System.out.println(cmbescolher.getSelectedIndex());
                switch (cmbescolher.getSelectedIndex()) {
                    case 0: {
                        Optional<Funcionario> func = new FuncionarioDao(sessionFactory).buscar(id);
                        Funcionario funcionario = func.get();
                        DlgFuncionario funcionarioTela = new DlgFuncionario(null, true, funcionario, permissao);
                        funcionarioTela.setVisible(true);
                        break;
                    }
                    case 1: {
                        Optional<Cliente> cli = new ClienteDao(sessionFactory).buscar(id);
                        Cliente cliente = cli.get();
                        DlgCliente clienteTela = new DlgCliente(null, true, cliente);
                        clienteTela.setVisible(true);
                        break;
                    }
                    case 2: {
                        Optional<Funcionario> vet = new FuncionarioDao(sessionFactory).buscar(id);
                        Funcionario veterinario = vet.get();
                        DlgVeterinario veterinarioTela = new DlgVeterinario(null, true, veterinario, permissao);
                        veterinarioTela.setVisible(true);
                        break;
                    }
                    default:
                        break;
                }
            }
        } catch (Exception e) {
            log.error("Erro ao selecionar na tabela de cadastros "
                    + "(combobox selected_index: "
                    + cmbescolher.getSelectedIndex()
                    + "): " + e.getMessage());
            JOptionPane.showMessageDialog(null, "Erro ao selecionar.");
        }
    }//GEN-LAST:event_tblgeralMouseClicked

    private void tfdbuscaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfdbuscaKeyReleased
        this.atualizarTabela();
    }//GEN-LAST:event_tfdbuscaKeyReleased

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        int i = JOptionPane.showConfirmDialog(null, "Tem certeza de que deseja sair?");
        if (i == 0) {
            funcLogado.setLogado(false);
            new FuncionarioDao(HibernateUtil.getSessionFactory()).atualizar(funcLogado);

            System.exit(0);
        }
    }//GEN-LAST:event_formWindowClosing

    public void atualizarTabela() {
        try {
            busca = tfdbusca.getText();

            Object[] cabecalho = {"id", "Nome", "Cidade", "CPF"};
            Object[][] dadosTabela = new Object[0][4];

            switch (cmbescolher.getSelectedIndex()) {
                case 0: {
                    List<Funcionario> funcionarios = new FuncionarioDao(sessionFactory).buscarPorNome(busca);
                    btnRelatorioCadastros.setVisible(true);
                    dadosTabela = new Object[funcionarios.size()][4];
                    if (funcionarios.size() > 0) {
                        for (int i = 0; i < funcionarios.size(); i++) {
                            dadosTabela[i][0] = funcionarios.get(i).getId();
                            dadosTabela[i][1] = funcionarios.get(i).getNome();
                            dadosTabela[i][2] = funcionarios.get(i).getCidade();
                            dadosTabela[i][3] = funcionarios.get(i).getCpf();
                        }
                    }
                    break;
                }

                case 1: {
                    List<Cliente> clientes = new ClienteDao(sessionFactory).buscarPorNome(busca);
                    btnRelatorioCadastros.setVisible(true);
                    dadosTabela = new Object[clientes.size()][4];
                    if (clientes.size() > 0) {
                        for (int i = 0; i < clientes.size(); i++) {
                            dadosTabela[i][0] = clientes.get(i).getId();
                            dadosTabela[i][1] = clientes.get(i).getNome();
                            dadosTabela[i][2] = clientes.get(i).getCidade();
                            dadosTabela[i][3] = clientes.get(i).getCpf();
                        }
                    }
                    break;
                }

                case 2: {
                    List<Funcionario> veterinarios = new FuncionarioDao(sessionFactory).buscarVetPorNome(busca);
                    btnRelatorioCadastros.setVisible(false);
                    dadosTabela = new Object[veterinarios.size()][4];
                    if (veterinarios.size() > 0) {
                        for (int i = 0; i < veterinarios.size(); i++) {
                            dadosTabela[i][0] = veterinarios.get(i).getId();
                            dadosTabela[i][1] = veterinarios.get(i).getNome();
                            dadosTabela[i][2] = veterinarios.get(i).getCidade();
                            dadosTabela[i][3] = veterinarios.get(i).getCpf();
                        }
                    }
                    break;
                }

                default:
                    break;
            }

            tblgeral.setModel(new DefaultTableModel(dadosTabela, cabecalho) {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return false;
                }

            });

            tblgeral.setSelectionMode(0);

            // redimensiona as colunas de uma tabela
            TableColumn column = null;
            for (int i = 0; i < tblgeral.getColumnCount(); i++) {
                column = tblgeral.getColumnModel().getColumn(i);
                DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
                centerRenderer.setHorizontalAlignment(JLabel.CENTER);
                column.setCellRenderer(centerRenderer);
            }

            column = tblgeral.getColumnModel().getColumn(0);
            column.setPreferredWidth(70);
            column.setMaxWidth(70);
            column.setMinWidth(70);
        } catch (Exception e) {
            log.error("Erro ao buscar na tabela de cadastros "
                    + "(combobox selected_item: "
                    + cmbescolher.getSelectedItem().toString()
                    + "): " + e.getMessage());
            JOptionPane.showMessageDialog(null, "Erro ao buscar.");
        }
    }

    private void btnSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSairActionPerformed
        int i = JOptionPane.showConfirmDialog(null, "Tem certeza de que deseja sair?");

        if (i == 0) {
            funcLogado.setLogado(false);
            new FuncionarioDao(HibernateUtil.getSessionFactory()).atualizar(funcLogado);

            System.exit(0);
        }
    }//GEN-LAST:event_btnSairActionPerformed

    private void btnAdminActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAdminActionPerformed
        DlgLogs dlgLogs = new DlgLogs(null, true);
        dlgLogs.setVisible(true);
    }//GEN-LAST:event_btnAdminActionPerformed

    private void cmbescolherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbescolherActionPerformed
        configurarPermissoesCadastros(permissao);
    }//GEN-LAST:event_cmbescolherActionPerformed

    private void cmbescolherItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbescolherItemStateChanged
        this.atualizarTabela();
    }//GEN-LAST:event_cmbescolherItemStateChanged

    private void btncadastrosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btncadastrosActionPerformed
        DlgProduto dlgProduto = new DlgProduto(null, true);
        dlgProduto.setVisible(true);
    }//GEN-LAST:event_btncadastrosActionPerformed

    private void btnPetshopMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnPetshopMouseEntered
        lblPetshop.setVisible(true);
    }//GEN-LAST:event_btnPetshopMouseEntered

    private void btnPetshopMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnPetshopMouseExited
        lblPetshop.setVisible(false);
    }//GEN-LAST:event_btnPetshopMouseExited

    private void btnVeterinariaMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnVeterinariaMouseEntered
        lblVeterinaria.setVisible(true);
    }//GEN-LAST:event_btnVeterinariaMouseEntered

    private void btnVeterinariaMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnVeterinariaMouseExited
        lblVeterinaria.setVisible(false);
    }//GEN-LAST:event_btnVeterinariaMouseExited

    private void btnPetshopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPetshopActionPerformed
        pnlHomeAdmin.setVisible(false);
        pnlHomeVet.setVisible(false);
        pnlRelatorios.setVisible(false);
        pnlVendas.setVisible(false);
        pnlHomePet.setVisible(true);
    }//GEN-LAST:event_btnPetshopActionPerformed

    private void btnVeterinariaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVeterinariaActionPerformed
        pnlHomeAdmin.setVisible(false);
        pnlHomePet.setVisible(false);
        pnlRelatorios.setVisible(false);
        pnlVendas.setVisible(false);
        pnlHomeVet.setVisible(true);
    }//GEN-LAST:event_btnVeterinariaActionPerformed

    private void btnvendasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnvendasActionPerformed
//        DlgVenda dlgVenda = new DlgVenda(null, true, funcLogado);
//        dlgVenda.setVisible(true);
        pnlHomeAdmin.setVisible(false);
        pnlHomePet.setVisible(true);
        pnlRelatorios.setVisible(false);
        pnlVendas.setVisible(true);
        pnlHomeVet.setVisible(false);
    }//GEN-LAST:event_btnvendasActionPerformed

    private void btnAgendaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgendaActionPerformed
        DlgAgenda dlgAgenda = new DlgAgenda(this, rootPaneCheckingEnabled, isAdmin, funcLogado);
        dlgAgenda.setVisible(true);
        this.atualizarDashboard();
    }//GEN-LAST:event_btnAgendaActionPerformed
   //------------------------------------[TELA DE RELATÓRIOS]-----------------------------------//
    private void btnRelatorioCadastrosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRelatorioCadastrosActionPerformed
        switch (cmbescolher.getSelectedIndex()) {
            case 0: {
                new ReportsGenerator().gerarRelatorioSimples("reports/relatorio_funcionarios.jrxml");
                break;
            }
            case 1: {
                new ReportsGenerator().gerarRelatorioSimples("reports/relatorio_clientes.jrxml");
            }
            default:
                break;
        }
    }//GEN-LAST:event_btnRelatorioCadastrosActionPerformed

    private void btnrelatorioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnrelatorioActionPerformed
        pnlRelatorios.setVisible(true);
        pnlHomeAdmin.setVisible(false);
        pnlHomePet.setVisible(false);
        pnlHomeVet.setVisible(false);
        pnlcadastros.setVisible(false);
    }//GEN-LAST:event_btnrelatorioActionPerformed

    private void btnListagemAtendimentosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnListagemAtendimentosActionPerformed
        new ReportsGenerator().gerarRelatorioSimples("reports/relatorio_agenda_hoje.jrxml");
    }//GEN-LAST:event_btnListagemAtendimentosActionPerformed

    private void btnAtendimentosPetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAtendimentosPetActionPerformed
        DlgBuscaPet buscaPet = new DlgBuscaPet(null, true, sessionFactory, true);
        buscaPet.setVisible(true);
    }//GEN-LAST:event_btnAtendimentosPetActionPerformed

    private void btnProdutosSemEstoqueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProdutosSemEstoqueActionPerformed
        new ReportsGenerator().gerarRelatorioSimples("reports/relatorio_produto_sem_estoque.jrxml");
    }//GEN-LAST:event_btnProdutosSemEstoqueActionPerformed

    private void btnAtendimentosFuncionarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAtendimentosFuncionarioActionPerformed
        DlgBuscaFuncionario buscaFuncionario = new DlgBuscaFuncionario(null, true, sessionFactory, true);
        buscaFuncionario.setVisible(true);
    }//GEN-LAST:event_btnAtendimentosFuncionarioActionPerformed
   
    //---------------------------------------[TELA DE VENDAS]-------------------------------------------------------//
    private void btnbuscacodigoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnbuscacodigoActionPerformed
        try {
            int id = Integer.parseInt(tfdCodigo.getText());
            Optional<Produto> p = new ProdutoDao(sessionFactory).buscar(id);
            Produto produto = p.get();
            String venda = priceToString(produto.getPreco_venda());
            tfdValorUnitario.setText(venda);
            tfdValorTotal.setText(venda);
            preco = venda;
            spnQuantidade.setValue(1);
            tfdProduto.setText(produto.getNome());
        } catch (Exception e) {
            log.error("Erro ao buscar produto: " + e.getMessage());
            JOptionPane.showMessageDialog(null, "Erro ao buscar produto: código inválido.");
        }
    }//GEN-LAST:event_btnbuscacodigoActionPerformed

    private void spnQuantidadeStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spnQuantidadeStateChanged
        int qtd = (Integer) spnQuantidade.getValue();
        double venda = Double.parseDouble(preco.replaceAll(",", "."));
        double total = (qtd * venda);
        String total2 = priceToString(total);
        tfdValorTotal.setText(total2);
    }//GEN-LAST:event_spnQuantidadeStateChanged

    private void btndescartarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btndescartarActionPerformed
        if (tabelaVenda.getSelectedRowCount() == 1) {
            String idString = String.valueOf(tabelaVenda.getValueAt(tabelaVenda.getSelectedRow(), 0));
            int idItem = Integer.parseInt(idString);
            Produto produtoRemover = new Produto();

            for (var entry : itens.entrySet()) {
                Produto prodEntry = entry.getKey();

                if (prodEntry.getId() == idItem) {
                    produtoRemover = prodEntry;
                }
            }

            itens.remove(produtoRemover);
            this.atualizarDTM();
            this.atualizaSubtotal();
        } else {
            if (tabelaVenda.getRowCount() == 0) {
                JOptionPane.showMessageDialog(null, "Tabela está vazia.");
            } else {
                JOptionPane.showMessageDialog(null, "Nenhum item selecionado.");
            }
        }
    }//GEN-LAST:event_btndescartarActionPerformed

    private void btnadicionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnadicionarActionPerformed

        int quantidade = (Integer) spnQuantidade.getValue();

        if (tfdCodigo.getText().isEmpty() || tfdCodigo.getText().equals("0")) {
            JOptionPane.showMessageDialog(rootPane,
                "Você deve inserir o código do produto!",
                "Atencão",
                JOptionPane.ERROR_MESSAGE);

        } else if (quantidade == 0) {
            JOptionPane.showMessageDialog(rootPane,
                "A quantidade de itens não pode ser zero!",
                "Atencão",
                JOptionPane.ERROR_MESSAGE);

        } else {

            //-----------------------------------------------------------------------------------//
            int verificar;

            int codigo = Integer.parseInt(tfdCodigo.getText());
            Optional<Produto> p = new ProdutoDao(sessionFactory).buscar(codigo);
            Produto produto = p.get();
            verificar = produto.getEstoque();

            if (verificar < quantidade) {
                JOptionPane.showMessageDialog(rootPane,
                    "A quantidade não está disponível em estoque!",
                    "Atencão",
                    JOptionPane.ERROR_MESSAGE);

            } else {
                boolean produtoExiste = false;

                for (var entry : itens.entrySet()) {
                    Produto prodEntry = entry.getKey();
                    Integer qtde = entry.getValue();
                    if (prodEntry.getId() == produto.getId()) {
                        produtoExiste = true;

                        if (verificar < qtde + quantidade) {
                            JOptionPane.showMessageDialog(rootPane,
                                "A quantidade não está disponível em estoque!",
                                "Atencão",
                                JOptionPane.ERROR_MESSAGE);
                        } else {
                            entry.setValue(qtde + quantidade);
                        }
                    }
                }

                if (!produtoExiste) {
                    itens.put(produto, quantidade);
                }

                this.atualizarDTM();

                atualizaSubtotal();
                limparCampos();
            }
        }
    }//GEN-LAST:event_btnadicionarActionPerformed

    private void chkDinheiroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkDinheiroActionPerformed
        if (chkDinheiro.isSelected()) {
            chkCartao.setSelected(false);
            tfdPagar.setEditable(true);
            formapagamento = "Dinheiro";
        }
    }//GEN-LAST:event_chkDinheiroActionPerformed

    private void chkCartaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkCartaoActionPerformed
        chkDinheiro.setSelected(false);
        tfdPagar.setEditable(true);
        formapagamento = "Cartão";
    }//GEN-LAST:event_chkCartaoActionPerformed

    private void btnfinalizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnfinalizarActionPerformed
        int cont = tabelaVenda.getRowCount();
        System.out.println("contagem: " + cont);

        if (cont <= 0) {
            JOptionPane.showMessageDialog(rootPane,
                "Você deve adicionar itens para venda!",
                "Atencão",
                JOptionPane.ERROR_MESSAGE);

        } else if (!chkDinheiro.isSelected() && !chkCartao.isSelected()) {
            JOptionPane.showMessageDialog(rootPane,
                "Você precisa selecionar uma forma de pagamento!",
                "Atencão",
                JOptionPane.ERROR_MESSAGE);

        } else if (tfdPagar.getText().isEmpty()) {
            JOptionPane.showMessageDialog(rootPane,
                "Você precisa informar o valor a ser pago!",
                "Atencão",
                JOptionPane.ERROR_MESSAGE);

        } else {
            Double valorPagar = Double.parseDouble(tfdPagar.getText().replaceAll(",", "."));
            Double totalc = Double.parseDouble(tfdTotal.getText().replaceAll(",", "."));
            if (valorPagar < totalc) {
                JOptionPane.showMessageDialog(rootPane,
                    "O valor a ser pago está incorreto!",
                    "Atencão",
                    JOptionPane.ERROR_MESSAGE);

            } else {

                VendaDao vendaDao = new VendaDao(sessionFactory);

                Caixa caixa = new Caixa();
                CaixaDao caixaDao = new CaixaDao(sessionFactory);

                Double total = Double.valueOf(tfdTotal.getText().replaceAll(",", ".")).doubleValue();
                LocalDate data = LocalDate.now();

                venda.setData_venda(data);
                venda.setValor_total(total);

                //                caixa.setServico(servico);
                caixa.setFuncionario(funcionario);
                caixa.setValor_total(total);
                caixa.setVenda(venda);
                venda.setCaixa(caixa);

                vendaDao.salvar(venda);
                caixaDao.salvar(caixa);

                if (valorPagar > total) {
                    Double troco = (valorPagar - total);
                    JOptionPane.showMessageDialog(rootPane,
                        "Venda concluída com sucesso!\n"
                        + "Troco: R$" + troco,
                        "Venda finalizada", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(rootPane,
                        "Venda concluída com sucesso!",
                        "Venda finalizada", JOptionPane.INFORMATION_MESSAGE);
                }

                //                -- --ATUALIZA OS DADOS DO PRODUTO NO BANCO DE DADOS ----------
                ProdutoDao produtoDao = new ProdutoDao(sessionFactory);
                int qtd;
                int retirado;
                int totalProd;

                for (var entry : itens.entrySet()) {
                    Produto prodEntry = entry.getKey();
                    Integer quantidade = entry.getValue();

                    retirado = quantidade;
                    qtd = prodEntry.getEstoque();
                    totalProd = qtd - retirado;

                    prodEntry.setEstoque(totalProd);
                    produtoDao.atualizar(prodEntry);
                }

                //                --------------------------------------------------------------
                //                -- --CRIA O VENDAPRODUTO NO BANCO DE DADOS RELATIVO A ESTA VENDA ----------
                VendaProdutoDao dao = new VendaProdutoDao(sessionFactory);

                for (var entry : itens.entrySet()) {
                    Produto prodEntry = entry.getKey();
                    Integer quantidade = entry.getValue();

                    VendaProduto item = new VendaProduto();
                    int idUltimaVenda = new VendaDao(sessionFactory).buscarTodos().size();
                    Optional<Venda> p = new VendaDao(sessionFactory).buscar(idUltimaVenda);
                    this.venda = p.get();

                    item.setProduto(prodEntry);
                    item.setVenda(venda);
                    item.setQtde_item(quantidade);
                    item.setValor_item(prodEntry.getPreco_venda());
                    dao.salvar(item);
                }

                //                --------------------------------------------------------------
                DefaultTableModel tabela = (DefaultTableModel) tabelaVenda.getModel();
                tabela.setRowCount(0);
                tfdTotal.setText("");

                tfdPagar.setText("0");
                chkDinheiro.setSelected(false);
                chkCartao.setSelected(false);
                itens.clear();
            }
        }
    }//GEN-LAST:event_btnfinalizarActionPerformed
     
    private void atualizarDTM() {

        dtmVendas = (DefaultTableModel) tabelaVenda.getModel();
        dtmVendas.setRowCount(0);

        for (var entry : itens.entrySet()) {
            Produto prodEntry = entry.getKey();
            Integer qtde = entry.getValue();
            dtmVendas.addRow(new Object[]{prodEntry.getId(), prodEntry.getNome(),
                prodEntry.getPreco_venda(), qtde, String.valueOf(prodEntry.getPreco_venda() * qtde)});
        }
    }
    
    public void atualizaSubtotal() {

        double subtotal = 0f;
        //faz cálculo de subtotal da compra
        for (var entry : itens.entrySet()) {
            Produto prodEntry = entry.getKey();
            Integer qtde = entry.getValue();
            subtotal += (double) qtde * prodEntry.getPreco_venda();
        }
        //insere valor subtotal da compra na label
        tfdTotal.setText(String.valueOf(subtotal));
    }

    public void limparCampos() {
        tfdProduto.setText("");
        tfdValorUnitario.setText("0");
        tfdValorTotal.setText("0");
        spnQuantidade.setValue(0);
        tfdCodigo.setText("0");
    }
    
     public static String priceWithDecimal(Double price) {
        DecimalFormat formatter = new DecimalFormat("###,###,###.00");
        return formatter.format(price);
    }

    public static String priceWithoutDecimal(Double price) {
        DecimalFormat formatter = new DecimalFormat("###,###,###.##");
        return formatter.format(price);
    }

    public static String priceToString(Double price) {
        String toShow = priceWithoutDecimal(price);
        if (toShow.indexOf(".") > 0) {
            return priceWithDecimal(price);
        } else {
            return priceWithoutDecimal(price);
        }
    }
    
    public void desativarTelas() {
        pnlHomeAdmin.setVisible(false);
        pnlHomePet.setVisible(false);
        pnlHomeVet.setVisible(false);
        pnlcadastros.setVisible(false);
        pnlRelatorios.setVisible(false);
    }

    public LocalDate convertToLocalDate(Date dateToConvert) {
        return dateToConvert.toInstant()
                .atZone(ZoneId.systemDefault())
                .toLocalDate();
    }

    public Date convertToDateViaInstant(LocalDate dateToConvert) {
        return java.util.Date.from(dateToConvert.atStartOfDay()
                .atZone(ZoneId.systemDefault())
                .toInstant());
    }

    public void configurarTblCadastros() {
        tblgeral.getTableHeader().setFont(new Font("Poppins", Font.BOLD, 15));
        tblgeral.getTableHeader().setForeground(Color.WHITE);
        tblgeral.getTableHeader().setOpaque(false);
        tblgeral.getTableHeader().setBackground(new Color(2, 166, 166));
    }

    public void configurarBotoes() {
        btnListagemAtendimentos.setOpaque(false);
        btnListagemAtendimentos.setContentAreaFilled(false);
        btnListagemAtendimentos.setBorderPainted(false);
        btnAtendimentosPet.setOpaque(false);
        btnAtendimentosPet.setContentAreaFilled(false);
        btnAtendimentosPet.setBorderPainted(false);
        btnProdutosSemEstoque.setOpaque(false);
        btnProdutosSemEstoque.setContentAreaFilled(false);
        btnProdutosSemEstoque.setBorderPainted(false);
        btnAtendimentosFuncionario.setOpaque(false);
        btnAtendimentosFuncionario.setContentAreaFilled(false);
        btnAtendimentosFuncionario.setBorderPainted(false);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel background;
    private javax.swing.JLabel barralateral;
    private javax.swing.JButton btnAdicionar;
    private javax.swing.JButton btnAdmin;
    private javax.swing.JButton btnAgenda;
    private javax.swing.JButton btnAtendimentosFuncionario;
    private javax.swing.JButton btnAtendimentosPet;
    private javax.swing.JButton btnListagemAtendimentos;
    private javax.swing.JButton btnPetshop;
    private javax.swing.JButton btnProdutosSemEstoque;
    private javax.swing.JButton btnRelatorioCadastros;
    private javax.swing.JButton btnSair;
    private javax.swing.JButton btnVeterinaria;
    private javax.swing.JButton btnadicionar;
    private javax.swing.JButton btnbuscacodigo;
    private javax.swing.JButton btncadastro;
    private javax.swing.JButton btncadastros;
    private javax.swing.JButton btndescartar;
    private javax.swing.JButton btnfinalizar;
    private javax.swing.JButton btnhome;
    private javax.swing.JButton btnrelatorio;
    private javax.swing.JButton btnvendas;
    private javax.swing.JCheckBox chkCartao;
    private javax.swing.JCheckBox chkDinheiro;
    private javax.swing.JLabel cifrao1;
    private javax.swing.JLabel cifrao2;
    private javax.swing.JComboBox<String> cmbescolher;
    private javax.swing.JLabel fndVendas;
    private javax.swing.JLabel fndrelatorios;
    private javax.swing.JLabel fundoPet;
    private javax.swing.JLabel fundoVet;
    private javax.swing.JLabel fundobusca;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel lblLogado;
    private javax.swing.JLabel lblPagar;
    private javax.swing.JLabel lblPetshop;
    private javax.swing.JLabel lblTotalClientes;
    private javax.swing.JLabel lblTotalLucroMes;
    private javax.swing.JLabel lblTotalProdutos;
    private javax.swing.JLabel lblVeterinaria;
    private javax.swing.JPanel pnlContadores;
    private javax.swing.JPanel pnlHomeAdmin;
    private javax.swing.JPanel pnlHomePet;
    private javax.swing.JPanel pnlHomeVet;
    private javax.swing.JPanel pnlRelatorios;
    private javax.swing.JPanel pnlTopProdutosChart;
    private javax.swing.JPanel pnlVendas;
    private javax.swing.JPanel pnlVendasMesChart;
    private javax.swing.JPanel pnlcadastros;
    private javax.swing.JPanel pnlmenulateral;
    private javax.swing.JSpinner spnQuantidade;
    private javax.swing.JTable tabelaVenda;
    private javax.swing.JTable tblgeral;
    private javax.swing.JTextField tfdCodigo;
    private javax.swing.JTextField tfdPagar;
    private javax.swing.JTextField tfdProduto;
    private javax.swing.JLabel tfdTotal;
    private javax.swing.JTextField tfdValorTotal;
    private javax.swing.JTextField tfdValorUnitario;
    private javax.swing.JTextField tfdbusca;
    private javax.swing.JTextArea txaAtendPet;
    private javax.swing.JTextArea txaAtendVet;
    private javax.swing.JLabel userimg;
    // End of variables declaration//GEN-END:variables
}
